# Generated by Django 2.0.5 on 2020-04-06 13:37

import ckeditor.fields
import colorfield.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DomainList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(max_length=100, unique=True)),
                ('domain_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority_tag', models.CharField(max_length=25, unique=True)),
                ('priority_color', models.CharField(max_length=7, unique=True)),
                ('priority_color_hex', colorfield.fields.ColorField(default='#000000', max_length=18, unique=True)),
            ],
            options={
                'verbose_name': 'Priority Tag',
                'verbose_name_plural': 'Priority Tags',
                'ordering': ['priority_tag'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.CharField(max_length=100, unique=True, verbose_name='Region')),
                ('region_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'ordering': ['region_name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=100, unique=True, verbose_name='Service')),
                ('service_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['service_name'],
            },
        ),
        migrations.CreateModel(
            name='StatusCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_category_tag', models.CharField(max_length=45, unique=True, verbose_name='Status')),
                ('status_category_color', models.CharField(max_length=7, unique=True)),
                ('status_category_color_hex', colorfield.fields.ColorField(default='#000000', max_length=18)),
                ('status_class_design', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Status Category',
                'verbose_name_plural': 'Status Categories',
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45)),
                ('email', models.CharField(max_length=45)),
                ('token', models.CharField(blank=True, max_length=128, null=True)),
                ('services', models.ManyToManyField(blank=True, to='status.Service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Subscriber',
                'verbose_name_plural': 'Subscribers',
            },
        ),
        migrations.CreateModel(
            name='SubService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_service_name', models.CharField(max_length=100, unique=True, verbose_name='Sub-Service')),
                ('sub_service_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Sub-Service',
                'verbose_name_plural': 'Sub-Services',
                'ordering': ['sub_service_name'],
            },
        ),
        migrations.CreateModel(
            name='SubServiceServices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='status.Priority')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.Service',
                                              verbose_name='Service')),
                ('subservice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.SubService',
                                                 verbose_name='Sub-Service')),
            ],
            options={
                'verbose_name': 'Topology',
                'verbose_name_plural': 'Topologies',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(max_length=10, unique=True)),
                ('begin', models.DateTimeField()),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('action_description', ckeditor.fields.RichTextField()),
                ('action_notes', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('notify_action', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False,
                                                      verbose_name='Ticket notified')),
                ('category_status',
                 models.ForeignKey(default=3, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   to='status.StatusCategory', verbose_name='Status')),
                ('sub_service',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='status.SubService',
                                   verbose_name='Sub-Service')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
            },
        ),
        migrations.CreateModel(
            name='TicketLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_date', models.DateTimeField()),
                ('action_notes', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Notes')),
                ('service_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.Ticket')),
                ('service_status',
                 models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='status.StatusCategory')),
            ],
        ),
        migrations.AddField(
            model_name='subservice',
            name='services',
            field=models.ManyToManyField(through='status.SubServiceServices', to='status.Service',
                                         verbose_name='Service'),
        ),
        migrations.AddField(
            model_name='subscriber',
            name='subservices',
            field=models.ManyToManyField(blank=True, to='status.SubService', verbose_name='Sub - Service'),
        ),
        migrations.AddField(
            model_name='region',
            name='services',
            field=models.ManyToManyField(to='status.Service'),
        ),
        migrations.AlterUniqueTogether(
            name='subserviceservices',
            unique_together={('service', 'subservice')},
        ),
    ]
